/*
    Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import gsap from 'gsap';
import { useGSAP } from '@gsap/react';
import { useRef, useState } from 'react';
import { Float, useGLTF, useTexture } from '@react-three/drei';

const Cube = ({ ...props }) => {
  const { nodes } = useGLTF('models/cube.glb');
  const texture = useTexture('textures/cube.png');
  const cubeRef = useRef();
  const [hovered, setHovered] = useState(false);

  // Find the first mesh automatically (no matter what it's called)
  const mesh = Object.values(nodes).find((n) => n.isMesh);

  useGSAP(() => {
    const tl = gsap.timeline({ repeat: -1, yoyo: true });

    tl.to(cubeRef.current.rotation, {
      y: "+=" + Math.PI / 4,
      x: "-=" + Math.PI / 6,
      duration: 2,
      ease: "sine.inOut",
    });

    tl.to(cubeRef.current.position, {
      y: "+=0.3",
      duration: 2,
      ease: "sine.inOut",
    }, "<");
  });


  if (!mesh) return null; // prevents crash if model not yet loaded

  return (
    <Float floatIntensity={2}>
      <group
        position={[9, -4, 0]}
        rotation={[2.6, 0.8 + Math.PI, -1.8]}

        scale={0.05}
        dispose={null}
        {...props}
      >
        <mesh
          ref={cubeRef}
          castShadow
          receiveShadow
          geometry={mesh.geometry}
          material={mesh.material} // ðŸ‘ˆ ×”×©×ª×ž×© ×‘Ö¾material ×”×ž×§×•×¨×™
          onPointerEnter={() => setHovered(true)}
        />

      </group>
    </Float>
  );
};

useGLTF.preload('models/cube.glb');

export default Cube;
